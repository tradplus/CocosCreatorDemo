// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif


#define SWIG_STD_MOVE(OBJ) std::move(OBJ)


#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_editor_support_auto.h"



se::Class* __jsb_cc_middleware_Texture2D_class = nullptr;
se::Object* __jsb_cc_middleware_Texture2D_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_middleware_Texture2D) 

static bool js_new_cc_middleware_Texture2D(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::middleware::Texture2D *result;
    result = (cc::middleware::Texture2D *)new cc::middleware::Texture2D();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_middleware_Texture2D, __jsb_cc_middleware_Texture2D_class, js_delete_cc_middleware_Texture2D)

static bool js_delete_cc_middleware_Texture2D(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_middleware_Texture2D) 

static bool js_cc_middleware_Texture2D_getPixelsWide(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    result = (int)((cc::middleware::Texture2D const *)arg1)->getPixelsWide();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_getPixelsWide) 

static bool js_cc_middleware_Texture2D_getPixelsHigh(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    result = (int)((cc::middleware::Texture2D const *)arg1)->getPixelsHigh();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_getPixelsHigh) 

static bool js_cc_middleware_Texture2D_getRealTextureIndex(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    result = (int)((cc::middleware::Texture2D const *)arg1)->getRealTextureIndex();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_getRealTextureIndex) 

static bool js_cc_middleware_Texture2D_setPixelsWide(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setPixelsWide(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_setPixelsWide) 

static bool js_cc_middleware_Texture2D_setPixelsHigh(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setPixelsHigh(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_setPixelsHigh) 

static bool js_cc_middleware_Texture2D_setRealTextureIndex(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    int arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setRealTextureIndex(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_setRealTextureIndex) 

static bool js_cc_middleware_Texture2D_setTexParamCallback(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    cc::middleware::Texture2D::texParamCallback *arg2 = 0 ;
    cc::middleware::Texture2D::texParamCallback temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    (arg1)->setTexParamCallback((cc::middleware::Texture2D::texParamCallback const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_setTexParamCallback) 

static bool js_cc_middleware_Texture2D_setRealTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    void *arg2 = (void *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    (arg1)->setRealTexture(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_setRealTexture) 

static bool js_cc_middleware_Texture2D_getRealTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    void *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::Texture2D>(s);
    if (nullptr == arg1) return true;
    result = (void *)((cc::middleware::Texture2D const *)arg1)->getRealTexture();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_Texture2D_getRealTexture) 

bool js_register_cc_middleware_Texture2D(se::Object* obj) {
    auto* cls = se::Class::create("Texture2D", obj, nullptr, _SE(js_new_cc_middleware_Texture2D)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("getPixelsWide", _SE(js_cc_middleware_Texture2D_getPixelsWide)); 
    cls->defineFunction("getPixelsHigh", _SE(js_cc_middleware_Texture2D_getPixelsHigh)); 
    cls->defineFunction("getRealTextureIndex", _SE(js_cc_middleware_Texture2D_getRealTextureIndex)); 
    cls->defineFunction("setPixelsWide", _SE(js_cc_middleware_Texture2D_setPixelsWide)); 
    cls->defineFunction("setPixelsHigh", _SE(js_cc_middleware_Texture2D_setPixelsHigh)); 
    cls->defineFunction("setRealTextureIndex", _SE(js_cc_middleware_Texture2D_setRealTextureIndex)); 
    cls->defineFunction("setTexParamCallback", _SE(js_cc_middleware_Texture2D_setTexParamCallback)); 
    cls->defineFunction("setRealTexture", _SE(js_cc_middleware_Texture2D_setRealTexture)); 
    cls->defineFunction("getRealTexture", _SE(js_cc_middleware_Texture2D_getRealTexture)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_middleware_Texture2D));
    
    
    cls->install();
    JSBClassType::registerClass<cc::middleware::Texture2D>(cls);
    
    __jsb_cc_middleware_Texture2D_proto = cls->getProto();
    __jsb_cc_middleware_Texture2D_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_middleware_SpriteFrame_class = nullptr;
se::Object* __jsb_cc_middleware_SpriteFrame_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_middleware_SpriteFrame) 

static bool js_cc_middleware_SpriteFrame_createWithTexture_static__SWIG_0(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    cc::Rect *arg2 = 0 ;
    cc::Rect temp2 ;
    cc::middleware::SpriteFrame *result = 0 ;
    
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    result = (cc::middleware::SpriteFrame *)cc::middleware::SpriteFrame::createWithTexture(arg1,(cc::Rect const &)*arg2);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_middleware_SpriteFrame_createWithTexture_static__SWIG_1(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::middleware::Texture2D *arg1 = (cc::middleware::Texture2D *) NULL ;
    cc::Rect *arg2 = 0 ;
    bool arg3 ;
    cc::Vec2 *arg4 = 0 ;
    cc::Size *arg5 = 0 ;
    cc::Rect temp2 ;
    cc::Vec2 temp4 ;
    cc::Size temp5 ;
    cc::middleware::SpriteFrame *result = 0 ;
    
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    
    ok &= sevalue_to_native(args[2], &arg3);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[3], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    
    ok &= sevalue_to_native(args[4], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    result = (cc::middleware::SpriteFrame *)cc::middleware::SpriteFrame::createWithTexture(arg1,(cc::Rect const &)*arg2,arg3,(cc::Vec2 const &)*arg4,(cc::Size const &)*arg5);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_middleware_SpriteFrame_createWithTexture_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    
    if (argc == 2) {
        ok = js_cc_middleware_SpriteFrame_createWithTexture_static__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } 
    if (argc == 5) {
        ok = js_cc_middleware_SpriteFrame_createWithTexture_static__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_middleware_SpriteFrame_createWithTexture_static) 

static bool js_new_cc_middleware_SpriteFrame(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::middleware::SpriteFrame *result;
    result = (cc::middleware::SpriteFrame *)new cc::middleware::SpriteFrame();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_middleware_SpriteFrame, __jsb_cc_middleware_SpriteFrame_class, js_delete_cc_middleware_SpriteFrame)

static bool js_delete_cc_middleware_SpriteFrame(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_middleware_SpriteFrame) 

static bool js_cc_middleware_SpriteFrame_initWithTexture__SWIG_0(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::middleware::SpriteFrame *arg1 = (cc::middleware::SpriteFrame *) NULL ;
    cc::middleware::Texture2D *arg2 = (cc::middleware::Texture2D *) NULL ;
    cc::Rect *arg3 = 0 ;
    cc::Rect temp3 ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::SpriteFrame>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    result = (bool)(arg1)->initWithTexture(arg2,(cc::Rect const &)*arg3);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}

static bool js_cc_middleware_SpriteFrame_initWithTexture__SWIG_1(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::middleware::SpriteFrame *arg1 = (cc::middleware::SpriteFrame *) NULL ;
    cc::middleware::Texture2D *arg2 = (cc::middleware::Texture2D *) NULL ;
    cc::Rect *arg3 = 0 ;
    bool arg4 ;
    cc::Vec2 *arg5 = 0 ;
    cc::Size *arg6 = 0 ;
    cc::Rect temp3 ;
    cc::Vec2 temp5 ;
    cc::Size temp6 ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::SpriteFrame>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &arg4);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    
    ok &= sevalue_to_native(args[4], &temp6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg6 = &temp6;
    
    result = (bool)(arg1)->initWithTexture(arg2,(cc::Rect const &)*arg3,arg4,(cc::Vec2 const &)*arg5,(cc::Size const &)*arg6);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}

static bool js_cc_middleware_SpriteFrame_initWithTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    
    if (argc == 2) {
        ok = js_cc_middleware_SpriteFrame_initWithTexture__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } 
    if (argc == 5) {
        ok = js_cc_middleware_SpriteFrame_initWithTexture__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_middleware_SpriteFrame_initWithTexture) 

static bool js_cc_middleware_SpriteFrame_getTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::SpriteFrame *arg1 = (cc::middleware::SpriteFrame *) NULL ;
    cc::middleware::Texture2D *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::SpriteFrame>(s);
    if (nullptr == arg1) return true;
    result = (cc::middleware::Texture2D *)(arg1)->getTexture();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_SpriteFrame_getTexture) 

static bool js_cc_middleware_SpriteFrame_setTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::SpriteFrame *arg1 = (cc::middleware::SpriteFrame *) NULL ;
    cc::middleware::Texture2D *arg2 = (cc::middleware::Texture2D *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::SpriteFrame>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setTexture(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_SpriteFrame_setTexture) 

bool js_register_cc_middleware_SpriteFrame(se::Object* obj) {
    auto* cls = se::Class::create("SpriteFrame", obj, nullptr, _SE(js_new_cc_middleware_SpriteFrame)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("initWithTexture", _SE(js_cc_middleware_SpriteFrame_initWithTexture)); 
    cls->defineFunction("getTexture", _SE(js_cc_middleware_SpriteFrame_getTexture)); 
    cls->defineFunction("setTexture", _SE(js_cc_middleware_SpriteFrame_setTexture)); 
    
    
    cls->defineStaticFunction("createWithTexture", _SE(js_cc_middleware_SpriteFrame_createWithTexture_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_middleware_SpriteFrame));
    
    
    cls->install();
    JSBClassType::registerClass<cc::middleware::SpriteFrame>(cls);
    
    __jsb_cc_middleware_SpriteFrame_proto = cls->getProto();
    __jsb_cc_middleware_SpriteFrame_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_middleware_SharedBufferManager_class = nullptr;
se::Object* __jsb_cc_middleware_SharedBufferManager_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_middleware_SharedBufferManager) 

static bool js_new_cc_middleware_SharedBufferManager(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if (argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    
    se::Object::TypedArrayType arg1 ;
    cc::middleware::SharedBufferManager *result;
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    result = (cc::middleware::SharedBufferManager *)new cc::middleware::SharedBufferManager(arg1);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_middleware_SharedBufferManager, __jsb_cc_middleware_SharedBufferManager_class, js_delete_cc_middleware_SharedBufferManager)

static bool js_delete_cc_middleware_SharedBufferManager(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_middleware_SharedBufferManager) 

static bool js_cc_middleware_SharedBufferManager_setResizeCallback(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::SharedBufferManager *arg1 = (cc::middleware::SharedBufferManager *) NULL ;
    cc::middleware::SharedBufferManager::resizeCallback arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::SharedBufferManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    (arg1)->setResizeCallback(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_SharedBufferManager_setResizeCallback) 

static bool js_cc_middleware_SharedBufferManager_getSharedBuffer(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::SharedBufferManager *arg1 = (cc::middleware::SharedBufferManager *) NULL ;
    se_object_ptr result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::SharedBufferManager>(s);
    if (nullptr == arg1) return true;
    result = ((cc::middleware::SharedBufferManager const *)arg1)->getSharedBuffer();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_SharedBufferManager_getSharedBuffer) 

bool js_register_cc_middleware_SharedBufferManager(se::Object* obj) {
    auto* cls = se::Class::create("SharedBufferManager", obj, nullptr, _SE(js_new_cc_middleware_SharedBufferManager)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("setResizeCallback", _SE(js_cc_middleware_SharedBufferManager_setResizeCallback)); 
    cls->defineFunction("getSharedBuffer", _SE(js_cc_middleware_SharedBufferManager_getSharedBuffer)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_middleware_SharedBufferManager));
    
    
    cls->install();
    JSBClassType::registerClass<cc::middleware::SharedBufferManager>(cls);
    
    __jsb_cc_middleware_SharedBufferManager_proto = cls->getProto();
    __jsb_cc_middleware_SharedBufferManager_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_middleware_MiddlewareManager_class = nullptr;
se::Object* __jsb_cc_middleware_MiddlewareManager_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_middleware_MiddlewareManager) 

static bool js_cc_middleware_MiddlewareManager_getInstance_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (cc::middleware::MiddlewareManager *)cc::middleware::MiddlewareManager::getInstance();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getInstance_static) 

static bool js_cc_middleware_MiddlewareManager_destroyInstance_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::middleware::MiddlewareManager::destroyInstance();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_destroyInstance_static) 

static bool js_cc_middleware_MiddlewareManager_generateModuleID_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    uint8_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = cc::middleware::MiddlewareManager::generateModuleID();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_generateModuleID_static) 

static bool js_cc_middleware_MiddlewareManager_update(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    float arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->update(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_update) 

static bool js_cc_middleware_MiddlewareManager_render(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    float arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->render(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_render) 

static bool js_cc_middleware_MiddlewareManager_getVBTypedArray(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    int arg2 ;
    int arg3 ;
    se_object_ptr result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    result = (arg1)->getVBTypedArray(arg2,arg3);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getVBTypedArray) 

static bool js_cc_middleware_MiddlewareManager_getIBTypedArray(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    int arg2 ;
    int arg3 ;
    se_object_ptr result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    result = (arg1)->getIBTypedArray(arg2,arg3);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getIBTypedArray) 

static bool js_cc_middleware_MiddlewareManager_getBufferCount(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    int arg2 ;
    std::size_t result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    result = (arg1)->getBufferCount(arg2);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getBufferCount) 

static bool js_cc_middleware_MiddlewareManager_getVBTypedArrayLength(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    int arg2 ;
    std::size_t arg3 ;
    std::size_t result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    result = (arg1)->getVBTypedArrayLength(arg2,arg3);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getVBTypedArrayLength) 

static bool js_cc_middleware_MiddlewareManager_getIBTypedArrayLength(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    int arg2 ;
    std::size_t arg3 ;
    std::size_t result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    result = (arg1)->getIBTypedArrayLength(arg2,arg3);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getIBTypedArrayLength) 

static bool js_cc_middleware_MiddlewareManager_getRenderInfoMgr(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    cc::middleware::SharedBufferManager *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    result = (cc::middleware::SharedBufferManager *)(arg1)->getRenderInfoMgr();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getRenderInfoMgr) 

static bool js_cc_middleware_MiddlewareManager_getAttachInfoMgr(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    cc::middleware::SharedBufferManager *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    result = (cc::middleware::SharedBufferManager *)(arg1)->getAttachInfoMgr();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_middleware_MiddlewareManager_getAttachInfoMgr) 

static bool js_new_cc_middleware_MiddlewareManager(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::middleware::MiddlewareManager *result;
    result = (cc::middleware::MiddlewareManager *)new cc::middleware::MiddlewareManager();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_middleware_MiddlewareManager, __jsb_cc_middleware_MiddlewareManager_class, js_delete_cc_middleware_MiddlewareManager)

static bool js_delete_cc_middleware_MiddlewareManager(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_middleware_MiddlewareManager) 

static bool js_cc_middleware_MiddlewareManager_isRendering_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->isRendering);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_middleware_MiddlewareManager_isRendering_set) 

static bool js_cc_middleware_MiddlewareManager_isRendering_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->isRendering, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_middleware_MiddlewareManager_isRendering_get) 

static bool js_cc_middleware_MiddlewareManager_isUpdating_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->isUpdating);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_middleware_MiddlewareManager_isUpdating_set) 

static bool js_cc_middleware_MiddlewareManager_isUpdating_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::middleware::MiddlewareManager *arg1 = (cc::middleware::MiddlewareManager *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::middleware::MiddlewareManager>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->isUpdating, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_middleware_MiddlewareManager_isUpdating_get) 

bool js_register_cc_middleware_MiddlewareManager(se::Object* obj) {
    auto* cls = se::Class::create("MiddlewareManager", obj, nullptr, _SE(js_new_cc_middleware_MiddlewareManager)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    cls->defineProperty("isRendering", _SE(js_cc_middleware_MiddlewareManager_isRendering_get), _SE(js_cc_middleware_MiddlewareManager_isRendering_set)); 
    cls->defineProperty("isUpdating", _SE(js_cc_middleware_MiddlewareManager_isUpdating_get), _SE(js_cc_middleware_MiddlewareManager_isUpdating_set)); 
    
    cls->defineFunction("update", _SE(js_cc_middleware_MiddlewareManager_update)); 
    cls->defineFunction("render", _SE(js_cc_middleware_MiddlewareManager_render)); 
    cls->defineFunction("getVBTypedArray", _SE(js_cc_middleware_MiddlewareManager_getVBTypedArray)); 
    cls->defineFunction("getIBTypedArray", _SE(js_cc_middleware_MiddlewareManager_getIBTypedArray)); 
    cls->defineFunction("getBufferCount", _SE(js_cc_middleware_MiddlewareManager_getBufferCount)); 
    cls->defineFunction("getVBTypedArrayLength", _SE(js_cc_middleware_MiddlewareManager_getVBTypedArrayLength)); 
    cls->defineFunction("getIBTypedArrayLength", _SE(js_cc_middleware_MiddlewareManager_getIBTypedArrayLength)); 
    cls->defineFunction("getRenderInfoMgr", _SE(js_cc_middleware_MiddlewareManager_getRenderInfoMgr)); 
    cls->defineFunction("getAttachInfoMgr", _SE(js_cc_middleware_MiddlewareManager_getAttachInfoMgr)); 
    
    
    cls->defineStaticFunction("getInstance", _SE(js_cc_middleware_MiddlewareManager_getInstance_static)); 
    cls->defineStaticFunction("destroyInstance", _SE(js_cc_middleware_MiddlewareManager_destroyInstance_static)); 
    cls->defineStaticFunction("generateModuleID", _SE(js_cc_middleware_MiddlewareManager_generateModuleID_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_middleware_MiddlewareManager));
    
    
    cls->install();
    JSBClassType::registerClass<cc::middleware::MiddlewareManager>(cls);
    
    __jsb_cc_middleware_MiddlewareManager_proto = cls->getProto();
    __jsb_cc_middleware_MiddlewareManager_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_editor_support(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("middleware", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("middleware", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_middleware_Texture2D(ns); 
    js_register_cc_middleware_SpriteFrame(ns); 
    js_register_cc_middleware_SharedBufferManager(ns); 
    js_register_cc_middleware_MiddlewareManager(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
